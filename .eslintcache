[{"E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\components\\EcommerceComponents\\Showproducts.js":"1","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\controller\\EcommerceController.js":"2","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\view\\Ecommerce.js":"3","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\components\\Header.js":"4","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\App.js":"5","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\controller\\ServicesController.js":"6","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\controller\\ShoppingcartController.js":"7","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\view\\Shoppingcart.js":"8","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\components\\EcommerceComponents\\ShowShoppingcart.js":"9"},{"size":1644,"mtime":1646118557155,"results":"10","hashOfConfig":"11"},{"size":4346,"mtime":1646153782352,"results":"12","hashOfConfig":"11"},{"size":733,"mtime":1646118895876,"results":"13","hashOfConfig":"11"},{"size":3130,"mtime":1646172569072,"results":"14","hashOfConfig":"11"},{"size":1386,"mtime":1646145677571,"results":"15","hashOfConfig":"11"},{"size":619,"mtime":1644876811650,"results":"16","hashOfConfig":"11"},{"size":4272,"mtime":1646178522670,"results":"17","hashOfConfig":"11"},{"size":1120,"mtime":1646175925217,"results":"18","hashOfConfig":"11"},{"size":4105,"mtime":1646176645846,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"1lvof4i",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\components\\EcommerceComponents\\Showproducts.js",["44","45","46"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Loader from '../Loader';\r\nexport default function Showproducts(props){\r\n\r\n\r\n    const DisplayProducts=(props)=>{\r\n       const listOfproducts=props.all_products.products;\r\n     let maindata=\"\";\r\n     let urlToImage=\"http://localhost/api-phpreact/photos/\";\r\n       //console.log(props);\r\n        //we create a list to loop through the array such that we get each data for rendering \r\n        let productsList =  listOfproducts.map((product,index)=>{\r\n              //remember PressEditBtn and PressDelete performs an action by means of props \r\n              return(  \r\n<div class=\"col-xs-18 col-sm-6 col-md-3\">\r\n<div class=\"thumbnail\">\r\n        <img  src={urlToImage + product.id+\".jpg\"} width=\"100%\" height=\"100%\" />\r\n        <div class=\"caption\">\r\n        <h4>{product.name}</h4>\r\n        <p>Product age : {product.age}</p>\r\n        <p><strong>Price: </strong>{product.id}$</p>\r\n        <p class=\"btn-holder\">\r\n          <button onClick={()=>props.AddToCartBtnPressed(product)} class=\"btn btn-warning btn-block text-center\"\r\n         role=\"button\">Add to cart</button>  {/*onClick={()=>props.EditBtnPressed(user)}*/}</p>\r\n        </div>\r\n        </div>\r\n        </div>\r\n\r\n              );\r\n\r\n        });\r\n\r\n      \r\n          //lets add the loader\r\n   \r\n       if(props.IsLoading===false){\r\n         \r\n           maindata = productsList;\r\n       }else{\r\n        maindata =<div className='col-12'><Loader /></div>\r\n       }\r\n       \r\n       return(\r\n        maindata\r\n       );\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        \r\n        DisplayProducts(props)\r\n        );\r\n\r\n\r\n}\r\n\r\n","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\controller\\EcommerceController.js",["47"],"E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\view\\Ecommerce.js",["48"],"import React,{Component} from 'react';\r\nimport Showproducts from '../components/EcommerceComponents/Showproducts';\r\n\r\nexport default function  Ecommerce(props) {\r\n\r\n   \r\n    console.log(props);\r\n    const  DiplayEcomerce=(props)=>{\r\n \r\n        return(\r\n        \r\n            <div>\r\n            <div className=\"container heading1\">\r\n            <h1>Our shop</h1>\r\n\r\n<div class=\"container\">\r\n<div class=\"row\">\r\n<Showproducts \r\nall_products={props.ProductsData} \r\n    IsLoading={props.IsLoading}\r\n    AddToCartBtnPressed={props.AddToCartBtnPressed}\r\n    />\r\n\r\n</div>\r\n</div>\r\n        \r\n\r\n            </div>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n\r\n\r\n    return(\r\n        DiplayEcomerce(props)\r\n        );\r\n        \r\n        }","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\components\\Header.js",["49"],"import React,{useEffect,useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n\r\n  const [Userscounter, setUsersCounter] = useState(0);\r\n  const [Cartcounter, setCartCounter] = useState(0);\r\n  //useEffect hook runs after the component is rendered.\r\n\r\n  useEffect(()=>{\r\n\r\n/*\r\nServer sent events are realtime events sent from the server to the client.\r\nIt's a way to subscribe to a data stream sent by a server.\r\nEventSource API, which is a standard interface to interact with the Server-Sent Events\r\nprotocol. It basically opens a persistent connection to our HTTP server. The cool thing about\r\nthe API is that it keeps the connection open until we call EventSource.close():\r\n*/\r\n\r\nlet eventSource = new EventSource(\"http://localhost/api-phpreact/notifications/notifier.php\")\r\neventSource.onmessage = e =>{ \r\n\r\n    var returneddata = JSON.parse(e.data);\r\n    console.log(returneddata);\r\n    //the data to the state\r\n    setUsersCounter(returneddata.TotalFound);\r\n     //you can also call a function and pass in the data like below\r\n    //eventSource.onmessage = e => updateUserList(JSON.parse(e.data))\r\n // eventSource.close();\r\n\r\n //since this server sent event is running forever, i call my local storage  and convert it\r\n // to json array and then i set to the state\r\n setCartCounter(0);\r\n let cart =  JSON.parse(localStorage.getItem('cart_items'));\r\n if(cart!==null){\r\n\r\n setCartCounter(cart.length);\r\n }\r\n\r\n}\r\n\r\n\r\n  \r\n},[]);\r\n\r\n\r\n    return (\r\n        <header>\r\n\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-to\">\r\n  <div class=\"container-fluid\">\r\n    <a class=\"navbar-brand\" href=\"#\">Navbar</a>\r\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li class=\"nav-item\">\r\n          <Link class=\"nav-link active\" aria-current=\"page\" to=\"/\"><i class='ion ion-ios-home'></i>Home \r\n           <span id=\"cartbadge\" class=\"badge badge-danger\">{Userscounter}</span></Link>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <Link class=\"nav-link\" to=\"/about\"><i class='ion ion-ios-list-outline'></i> About</Link>\r\n        </li>\r\n\r\n        <li class=\"nav-item\">\r\n          <Link class=\"nav-link\" to=\"/services\"><i class='ion ion-ios-briefcase'></i> Services</Link>\r\n        </li>\r\n\r\n        <li class=\"nav-item\">\r\n          <Link class=\"nav-link\" to=\"/ecommerce\"><i class='ion ion-ios-list-outline'></i> Ecommerce</Link>\r\n        </li>\r\n\r\n        <li class=\"nav-item\">\r\n          <Link class=\"nav-link\"  to=\"/shoppingcart\"> <i class='ion ion-android-cart'></i> Shopping cart \r\n              <span id=\"cartbadge\" class=\"badge badge-danger\">{Cartcounter}</span></Link>\r\n        </li>\r\n\r\n        \r\n      </ul>\r\n    \r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n\r\n           \r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\App.js",[],"E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\controller\\ServicesController.js",["50","51","52"],"E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\controller\\ShoppingcartController.js",["53","54","55"],"import React,{useEffect,useState} from 'react';\r\nimport Axios from 'axios';//this package needs to be installed\r\n\r\nimport Shoppingcart from '../view/Shoppingcart';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nexport default function ShoppingcartController (){\r\n\r\n//this is our controller and will be making api Requests to work as a model\r\n    //so connecting to the database Is a Data model in this controller\r\n\r\n    //Remember here we only call one View component to recieve data in state as props \r\n    //and this is at the end of this function when you scroll down  \r\n\r\n   //letâ€™s initialize our state. It is quite simple:\r\n   const [CartData, setCartData] = useState([]);\r\n   const [IsLoading, setIsLoading] = useState(false);\r\n\r\n   useEffect(()=>{\r\n\r\n    getCartItems_Model();\r\n\r\n\r\n},[]);\r\n\r\n\r\n\r\n\r\n    // each request here will be stored in a function\r\n\r\n    const getCartItems_Model=()=>{\r\n\r\n        setCartData(CartData);\r\n        setIsLoading(true);\r\n\r\n        let cart =  JSON.parse(localStorage.getItem('cart_items'));\r\n\r\n        console.log(cart);\r\n// Now all we have to do is add the data weâ€™ve retrieved from our GET request to the `getUsers` in our state\r\n\r\n     //   our data is safely in our state object, and ready to be passed to our view\r\n     setCartData(cart);\r\n     setIsLoading(false);\r\n    \r\n}\r\n\r\n\r\n\r\nconst RemoveItemFromCartBtnPressed=(cartItem)=>{\r\n\r\n    setIsLoading(true);\r\n  //here we are filtering out the specific CartData by id,\r\n    // in doing this we are removing it from the CartData state and create new array copy\r\n    let NewCartItems =CartData.filter(cartdata=>{\r\n        return cartdata.productid !==cartItem.productid; //return items which does not have cartItem.productid \r\n    });\r\n\r\nlocalStorage.setItem('cart_items', JSON.stringify(NewCartItems));\r\n//console.log(cart);\r\nsetCartData(NewCartItems);\r\nsetIsLoading(false);\r\n\r\n}\r\n\r\n\r\nconst EmptyCartBtnPressed=()=>{\r\n    \r\n    localStorage.removeItem('cart_items');\r\n    setCartData([]);\r\n\r\n    }\r\n\r\n\r\n    \r\n    \r\n\r\nconst IncreaseQTYBtnPressed=(cartItem)=>{  \r\n//console.log(cartItem);\r\nlet cart = localStorage.getItem('cart_items') ? JSON.parse(localStorage.getItem('cart_items')) : [];\r\n\r\nfor (var i = 0; i < cart.length; i++) {\r\n    var _cart = cart[i];\r\n//here we find a match of products with same id and adjust it's quantity\r\n//console.log(id +\" == \"+ _cart.productid);\r\n    if (cartItem.productid === _cart.productid) {\r\n        //splice replaces the existing array item with new quantity\r\n        //item is already in a cart ,lets adjust it's quantity\r\n        cart.splice(cart.indexOf(_cart),1,{\r\n            productid: cartItem.productid,\r\n            productname: cartItem.productname,\r\n            price: cartItem.productid,\r\n            quantity : _cart.quantity + 1\r\n        });\r\n\r\n    }\r\n\r\n}//end the loop\r\n//console.log(cart);\r\nlocalStorage.setItem('cart_items', JSON.stringify(cart));\r\nsetCartData(cart);\r\n\r\n}\r\n\r\n\r\nconst DecreaseQTYBtnPressed=(cartItem)=>{\r\n\r\n//console.log(cartItem);\r\nlet cart = localStorage.getItem('cart_items') ? JSON.parse(localStorage.getItem('cart_items')) : [];\r\n//let's not decrease the quantity , if quantity it's 1\r\nif(cartItem.quantity >1){\r\nfor (var i = 0; i < cart.length; i++) {\r\n    var _cart = cart[i];\r\n//here we find a match of products with same id and adjust it's quantity\r\n//console.log(id +\" == \"+ _cart.productid);\r\n    if (cartItem.productid === _cart.productid) {\r\n        //splice replaces the existing array item with new quantity\r\n        //item is already in a cart ,lets adjust it's quantity\r\n        cart.splice(cart.indexOf(_cart),1,{\r\n            productid: cartItem.productid,\r\n            productname: cartItem.productname,\r\n            price: cartItem.productid,\r\n            quantity : _cart.quantity - 1\r\n        });\r\n\r\n    }\r\n\r\n}//end the loop\r\n//console.log(cart);\r\nlocalStorage.setItem('cart_items', JSON.stringify(cart));\r\nsetCartData(cart);\r\n} \r\n}\r\n\r\n\r\n//and we can  pass data to the  view it the state as a prop.\r\nreturn <Shoppingcart\r\nCartData={CartData} \r\nIsLoading={IsLoading}\r\nRemoveItemFromCartBtnPressed={RemoveItemFromCartBtnPressed} \r\nEmptyCartBtnPressed={EmptyCartBtnPressed}\r\nDecreaseQTYBtnPressed={DecreaseQTYBtnPressed}\r\nIncreaseQTYBtnPressed={IncreaseQTYBtnPressed}\r\n/>;\r\n\r\n\r\n}","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\view\\Shoppingcart.js",["56"],"import React,{Component} from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport ShowShoppingcart from '../components/EcommerceComponents/ShowShoppingcart';\r\n\r\nexport default function  Ecommerce(props) {\r\n\r\n   \r\n    console.log(props);\r\n    const  DiplayShoppingCart=(props)=>{\r\n \r\n         if(props.CartData===null){\r\n       return <Redirect to=\"/ecommerce\" />\r\n         }\r\n        return(\r\n\r\n        \r\n        \r\n            <div>\r\n            <div className=\"container heading1\">\r\n            <h1>Shopping cart ({props.CartData.length})</h1>\r\n\r\n<div class=\"container\">\r\n<div class=\"row\">\r\n<ShowShoppingcart \r\nCartData={props.CartData} \r\n    IsLoading={props.IsLoading}\r\n    RemoveItemFromCartBtnPressed={props.RemoveItemFromCartBtnPressed}\r\n    EmptyCartBtnPressed={props.EmptyCartBtnPressed}\r\n    DecreaseQTYBtnPressed={props.DecreaseQTYBtnPressed}\r\nIncreaseQTYBtnPressed={props.IncreaseQTYBtnPressed}\r\n    \r\n    \r\n    />\r\n\r\n</div>\r\n</div>\r\n        \r\n\r\n            </div>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n\r\n\r\n    return(\r\n        DiplayShoppingCart(props)\r\n        );\r\n        \r\n        }","E:\\React-sample-projects\\learning-react-mvc-pattern-7\\src\\components\\EcommerceComponents\\ShowShoppingcart.js",["57"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Loader from '../Loader';\r\nexport default function ShowShoppingcart(props){\r\n\r\n\r\n    \r\n\r\n    const DisplayCart=(props)=>{\r\n       const listOfItems=props.CartData;\r\n     let maindata=\"\";\r\n     let urlToImage=\"http://localhost/api-phpreact/photos/\";\r\n     let total=0;\r\n    \r\n       //console.log(props);\r\n        //we create a list to loop through the array such that we get each data for rendering \r\n        let cartList =  listOfItems.map((cart,index)=>{\r\n              //remember PressEditBtn and PressDelete performs an action by means of props \r\n\r\n              total += cart.price * cart.quantity;\r\n              return(  \r\n                <tr>\r\n                    <td data-th=\"Product\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-sm-3 hidden-xs\">\r\n                <img src={urlToImage + cart.productid+\".jpg\"} width=\"100%\" height=\"100%\" class=\"img-responsive\"/></div>\r\n                            <div class=\"col-sm-6\">\r\n                                <h4 class=\"nomargin\">{cart.productname}</h4>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                    <td data-th=\"Price\">{cart.price}</td>\r\n                    <td data-th=\"Quantity\">\r\n                        {/*<input type=\"number\" defaultValue={cart.quantity} class=\"form-control quantity\" />*/}\r\n                <button class=\"btn btn-info btn-sm\" onClick={()=>props.DecreaseQTYBtnPressed(cart)}>\r\n                    <i class=\"ion ion-ios-minus\"></i></button>\r\n                &nbsp;\r\n                        <strong>{cart.quantity}</strong> \r\n                &nbsp;              \r\n                <button class=\"btn btn-primary btn-sm\" onClick={()=>props.IncreaseQTYBtnPressed(cart)}>\r\n                    <i class=\"ion ion-plus\"></i></button>        \r\n                    </td>\r\n                    <td data-th=\"Subtotal\" class=\"text-center\">{cart.price * cart.quantity}</td>\r\n                    <td class=\"actions\" data-th=\"\">\r\n       <button class=\"btn btn-info btn-sm update-cart\" \r\n       data-id={cart.productid}><i class=\"ion ion-android-refresh\"></i></button>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <button class=\"btn btn-danger btn-sm remove-from-cart\" \r\n            onClick={()=>props.RemoveItemFromCartBtnPressed(cart)}\r\n            data-id={cart.productid}><i class=\"ion ion-ios-trash\"></i></button>\r\n                    </td>\r\n                </tr>\r\n \r\n\r\n              );\r\n\r\n        });\r\n\r\n      \r\n          //lets add the loader\r\n   \r\n       if(props.IsLoading===false){\r\n         \r\n        maindata = <div class=\"col-xs-12 col-sm-12 col-md-12\">\r\n        <table id=\"cart\" class=\"table table-hover table-condensed\">\r\n                <thead>\r\n                <tr>\r\n                    <th style={{width:\"50%\"}}>Product</th>\r\n                    <th style={{width:\"10%\"}}>Price</th>\r\n                    <th style={{width:\"20%\"}}>Quantity</th>\r\n                    <th style={{width:\"22%\"}} class=\"text-center\">Subtotal</th>\r\n                    <th style={{width:\"10%\"}}></th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n            { cartList }\r\n            </tbody>\r\n        <tfoot>\r\n        <tr class=\"visible-xs\">\r\n            <td class=\"text-center\"><strong>Total {total}</strong></td>\r\n        </tr>\r\n        <tr>\r\n            <td><Link to=\"/ecommerce\" class=\"btn btn-warning\"><i class=\"fa fa-angle-left\"></i> Continue Shopping</Link></td>\r\n            <td colspan=\"2\" class=\"hidden-xs\"> <button class=\"btn btn-danger\" \r\n            onClick={()=>props.EmptyCartBtnPressed()}><i class=\"ion ion-ios-trash\"></i> Empty cart</button></td>\r\n            <td class=\"hidden-xs text-center\"><strong>Total {total}</strong></td>\r\n        </tr>\r\n        </tfoot>\r\n    </table>\r\n    </div>;\r\n\r\n       }else{\r\n        maindata =<div className='col-12'><Loader /></div>\r\n       }\r\n       \r\n       return(\r\n        maindata\r\n       );\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        \r\n        DisplayCart(props)\r\n        );\r\n\r\n\r\n}\r\n\r\n",{"ruleId":"58","severity":1,"message":"59","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":14},{"ruleId":"62","severity":1,"message":"63","line":18,"column":9,"nodeType":"64","endLine":18,"endColumn":81},{"ruleId":"65","severity":1,"message":"66","line":24,"column":11,"nodeType":"64","endLine":25,"endColumn":24},{"ruleId":"67","severity":1,"message":"68","line":24,"column":3,"nodeType":"69","endLine":24,"endColumn":5,"suggestions":"70"},{"ruleId":"58","severity":1,"message":"71","line":1,"column":15,"nodeType":"60","messageId":"61","endLine":1,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":52,"column":5,"nodeType":"64","endLine":52,"endColumn":38},{"ruleId":"58","severity":1,"message":"74","line":1,"column":15,"nodeType":"60","messageId":"61","endLine":1,"endColumn":24},{"ruleId":"58","severity":1,"message":"75","line":1,"column":25,"nodeType":"60","messageId":"61","endLine":1,"endColumn":33},{"ruleId":"58","severity":1,"message":"76","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":13},{"ruleId":"58","severity":1,"message":"76","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":13},{"ruleId":"58","severity":1,"message":"77","line":5,"column":10,"nodeType":"60","messageId":"61","endLine":5,"endColumn":18},{"ruleId":"67","severity":1,"message":"78","line":25,"column":3,"nodeType":"69","endLine":25,"endColumn":5,"suggestions":"79"},{"ruleId":"58","severity":1,"message":"71","line":1,"column":15,"nodeType":"60","messageId":"61","endLine":1,"endColumn":24},{"ruleId":"62","severity":1,"message":"63","line":26,"column":17,"nodeType":"64","endLine":26,"endColumn":114},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllProducts_Model'. Either include it or remove the dependency array.","ArrayExpression",["80"],"'Component' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'useState' is defined but never used.","'Axios' is defined but never used.","'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'getCartItems_Model'. Either include it or remove the dependency array.",["81"],{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [getAllProducts_Model]",{"range":"86","text":"87"},"Update the dependencies array to be: [getCartItems_Model]",{"range":"88","text":"89"},[762,764],"[getAllProducts_Model]",[796,798],"[getCartItems_Model]"]